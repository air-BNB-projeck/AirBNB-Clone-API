// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	stays "alta/air-bnb/features/stays"

	mock "github.com/stretchr/testify/mock"
)

// StayDataInterface is an autogenerated mock type for the StayDataInterface type
type StayDataInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: stayId
func (_m *StayDataInterface) Delete(stayId string) error {
	ret := _m.Called(stayId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(stayId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: stayData
func (_m *StayDataInterface) Insert(stayData stays.CoreStayRequest) (string, error) {
	ret := _m.Called(stayData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(stays.CoreStayRequest) (string, error)); ok {
		return rf(stayData)
	}
	if rf, ok := ret.Get(0).(func(stays.CoreStayRequest) string); ok {
		r0 = rf(stayData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(stays.CoreStayRequest) error); ok {
		r1 = rf(stayData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: stayId
func (_m *StayDataInterface) Select(stayId string) (stays.Core, error) {
	ret := _m.Called(stayId)

	var r0 stays.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (stays.Core, error)); ok {
		return rf(stayId)
	}
	if rf, ok := ret.Get(0).(func(string) stays.Core); ok {
		r0 = rf(stayId)
	} else {
		r0 = ret.Get(0).(stays.Core)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stayId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *StayDataInterface) SelectAll() ([]stays.Core, error) {
	ret := _m.Called()

	var r0 []stays.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]stays.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []stays.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stays.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: stayId, stayData
func (_m *StayDataInterface) Update(stayId string, stayData stays.CoreStayRequest) error {
	ret := _m.Called(stayId, stayData)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, stays.CoreStayRequest) error); ok {
		r0 = rf(stayId, stayData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStayDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewStayDataInterface creates a new instance of StayDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStayDataInterface(t mockConstructorTestingTNewStayDataInterface) *StayDataInterface {
	mock := &StayDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
