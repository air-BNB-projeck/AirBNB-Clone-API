// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	users "alta/air-bnb/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserDataInterface is an autogenerated mock type for the UserDataInterface type
type UserDataInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userId
func (_m *UserDataInterface) Delete(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: userData
func (_m *UserDataInterface) Insert(userData users.CoreUserRequest) (uint, error) {
	ret := _m.Called(userData)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(users.CoreUserRequest) (uint, error)); ok {
		return rf(userData)
	}
	if rf, ok := ret.Get(0).(func(users.CoreUserRequest) uint); ok {
		r0 = rf(userData)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(users.CoreUserRequest) error); ok {
		r1 = rf(userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: userId
func (_m *UserDataInterface) Select(userId uint) (users.Core, error) {
	ret := _m.Called(userId)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Core, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Core); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, userData
func (_m *UserDataInterface) Update(userId uint, userData users.CoreUserRequest) error {
	ret := _m.Called(userId, userData)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.CoreUserRequest) error); ok {
		r0 = rf(userId, userData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmailUser provides a mock function with given fields: email
func (_m *UserDataInterface) VerifyEmailUser(email string) (users.CoreLoginUserData, error) {
	ret := _m.Called(email)

	var r0 users.CoreLoginUserData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.CoreLoginUserData, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) users.CoreLoginUserData); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(users.CoreLoginUserData)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserDataInterface creates a new instance of UserDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserDataInterface(t mockConstructorTestingTNewUserDataInterface) *UserDataInterface {
	mock := &UserDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
